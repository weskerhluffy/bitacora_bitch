***********************************************************************
*SE FORMATEA EL LOG IOA PARA PRESENTAR LOS CAMPOS QUE SE ENVIARAN A LA
*BITACORA SEPARADOS POR COMA. SE CREA UNA FUNCIÏN PARA DISTINGUIR
*REGISTROS SIN JOB NAME, DE MANERA QUE SE PUEDA TOMAR EL MEMBER NAME.
*EL DESPLAZAMIENTO PARA TOMAR EL NOMBRE DEL MEMBER SE GUARDA EN
*MEMORIA SOBRE LA LINEA, EN UN êREA DE TRABAJO INDEPENDIENTE AL BUFFER
*DE ESCRITURA A ARCHIVO.
*SE FILTRAN LOS REGISTROS QUE NO TIENEN QUE VER CON EVENTOS/ACCIONES
*DE LOS JOBS.
*SE TOMA CORRECTAMENTE EL NOMBRE DEL JOB/MEMBER DE LA MAYORIA DE LOS
*REGISTROS, INCLUSO DEL SEL219I, QUE A VECES TRAE JOB NAME Y A VECES
*NO.
*SE TOMA EL JOB ID SOLO SI ES VALIDO, ES DECIR, SI ES NUM©RICO.
*SE TOMAN EL PASO Y CODIGO DE ERROR EN CASO DE REGISTROS QUE DENOTEN
*CANCELACIÏN.
*SE TOMAN LA ACCIÏN Y EL USUARIO EN LOS REGISTROS QUE DENOTAN UNA
*ACCIÏN HUMANA.
*SE AãADE EL CÏDIGO DE LA EMPRESA AL INICIO DEL ARCHIVO
*LA LONGITUD DEL REGISTRO DE SALIDA DEPENDE DEL VALOR CALCULADO
*EN LOS EQU.
*SE AãADE UN PREFIJO DE AãO EN LOS CAMPOS DE TIEMPO Y ODATE PARA
*QUE SE PUEDAN CARGAR DIRECTAMENTE EN BD.
***********************************************************************
         COPY ASMMSP
*MACRO PARA ALIAS DE REGISTROS
         YREGS
*RENOMBRA BAS A BRAS PARA QUE NO FALLEN OPEN/CLOSE
BAS      OPSYN BRAS
*INICIA SECCION DE CONTROL
ENTRY    CSECT
ENTRY    AMODE 64
ENTRY    RMODE 24
         SYSSTATE AMODE64=YES,ARCHLVL=2
         ASMMREL  ON
*SE RESPALDAN LOS REGISTROS DEL QUE LLAMA
         STMG  R14,R12,8(R13)
*SE OBTIENE LA DIRECCION DEL SAVEAREA
         LARL  R14,SAVEAREA
         MVC   4(4,R13),=C'F4SA'-SAVEAREA(R14)
         STG   R13,128(,R14)
*ENCADENANDO SAVEAREA PROPIA EN EL SAVEAREA DEL QUE LLAMA
         STG   R14,136(,R13)
*SE GUARDA LA DIRECCION DEL SAVEAREA EN R13
         LGR   R13,R14
*SE LE INDICA A ASM QUE EL REG BASE ES EL 13, DE SAVEAREA HASTA
*ENTRYEND
         USING (SAVEAREA,ENTRYEND),R13
*SE INDICA EL FORMATO DE LA CONVENCION DE ENLACE
         MVC   SAVEAREA+4(4),=C'F4SA'
*SE CARGA LA DIRECCIÏN A LA QUE SE SALTARê
         LLGT  R15,=A(MAIN)
*SE SALTA A ESA DIRECCIÏN
         BR    R15
SAVEAREA DC    18FD'0'
ORIGIN   DC    AD(0)
HIGH     DC    AD(0)
WRKAREA  DC    AD(0)
LOGOUT   DCB   DDNAME=LOGFORM,DSORG=PS,MACRF=(PL),RECFM=FB,            X
               DCBE=DCBEOUT,LRECL=TAM_REGISTRO-1
DCBEOUT  DCBE  RMODE31=BUFF
LOGIN    DCB   DDNAME=LOGIOA,DSORG=PS,MACRF=(GL),RECFM=FB,DCBE=DCBEIN, X
               LRECL=200
DCBEIN   DCBE  RMODE31=BUFF,EODAD=EOF
         IARV64 MF=(L,IARV64)
         LTORG
*FINAL DE SECCION RMODE24
ENTRYEND DS    0D
*SE INICIA OTRA SECCIÏN DE CONTROL DONDE SE HACEN CHEQUEOS PARA QUE
*SEA REENTRANTE
MAIN     RSECT
MAIN     AMODE 64
MAIN     RMODE 31
*SE OBTIENE DIRECCION DE DATOS ESTATICOS
         LARL  R12,STATIC
*SE LE INDICA AL ENSAMBLADOR EL REGISTRO BASE
         USING (STATIC,MAINEND),R12
         IARV64 REQUEST=GETSTOR,                                       X
               SEGMENTS==AD(MAXSIZE),                                  X
               GUARDLOC=HIGH,                                          X
               ORIGIN=ORIGIN,                                          X
               MF=(E,IARV64,COMPLETE)
         IARV64 REQUEST=GETSTOR,                                       X
               SEGMENTS==AD(MAXSIZE),                                  X
               GUARDLOC=HIGH,                                          X
               ORIGIN=WRKAREA,                                         X
               MF=(E,IARV64,COMPLETE)
         LG    R6,ORIGIN
*SE CAMBIA DE MODO DE DIRECCIONAMIENTO PARA QUE FUNCIONEN
*OPEN,CLOSE, GET Y PUT
         SAM31
         OPEN  (LOGIN,(INPUT)),MODE=31
         OPEN  (LOGOUT,(OUTPUT)),MODE=31
         DO    INF
*DIRECCIONAMIENTO DE 31 BYTES PARA IO
             SAM31
             LA    R1,LOGIN
             GET   (1)
*DIRECCIONAMIENTO DE 64 BYTES PARA CARGAR DIRECCION
             SAM64
*SE CARGA EN UN REGISTRO PAR (2) LA DIRECCION DE ORIGEN DE DATOS
*DEL ARCHIVO DE ENTRADA
             LLGTR R2,R1
             LLGTR R8,R1
*LEYENDO EL CÏDIGO DE EVENTO/ACCIÏN PARA DETERMINAR SI EL REGISTRO
*DEBE TOMARSE EN CUENTA O NO
             AGHI  R2,DESP_CODIGO
             XGR   R7,R7
             XGR   R3,R3
             LGHI  R7,TAM_CODIGO
             LGHI  R3,TAM_CODIGO
*SE RESPALDA EL APUNTADOR AL INICIO DEL CÏDIGO EN EL BUFFER PARA UTI
*ZARLO EN LA SUBRUTINA REG_NO_VALIDO
             LG    R6,ORIGIN
             LGR   R10,R6
TESTCODIGO   MVCLE R6,R2,0
             BRC   1,TESTCODIGO
             MVI   0(R6),FIN_CADENA
*PROBANDO SI EL CODIGO IMPLICA QUE EL REGISTRO ES VALIDO
             BAS   R9,REG_NO_VALIDO
             IF (CLFI,R15,NE,VERDADERO) THEN
*INICIALIZANDO EL APUNTADOR DEL BUFFER R6 Y EL DEL ARCHIVO R2
                 LG    R6,ORIGIN
*DIRECCIONAMIENTO DE 31 BYTES PARA IO
                 SAM31
                 LA    R1,LOGOUT
                 PUT   (1)
                 SAM64
*SE CARGA EN OTRO REGISTRO PAR (4) LA DIRECCION DE
*DESTINO DE DATOS DEL ARCHIVO DE SALIDA
*DESPLAZAMIENTO INICIAL PARA TOMAR EL PRIMER CAMPO DEL ARCHIVO
                 LLGTR R4,R1
*MOVIENDO LA EMPRESA
                 LA    R2,COD_EMPRESA
                 XGR   R7,R7
                 XGR   R3,R3
                 LGHI  R7,L'COD_EMPRESA
                 LGHI  R3,L'COD_EMPRESA
MOVEEMPRESA      MVCLE R6,R2,0
                 BRC   1,MOVEEMPRESA
                 MVI   0(R6),SEPARADOR
                 AGHI  R6,1
*MOVIENDO EL PREFIJO DEL TIEMPO
                 LA    R2,PREFIJO_ANO
                 XGR   R7,R7
                 XGR   R3,R3
                 LGHI  R7,L'PREFIJO_ANO
                 LGHI  R3,L'PREFIJO_ANO
MOVEANOTIEMPO    MVCLE R6,R2,0
                 BRC   1,MOVEANOTIEMPO
*MOVIENDO EL TIEMPO AL BUFFER
                 LGR   R2,R8
                 AGHI  R2,DESP_TIME
                 XGR   R7,R7
                 XGR   R3,R3
                 LGHI  R7,TAM_TIME
                 LGHI  R3,TAM_TIME
MOVETIME         MVCLE R6,R2,0
                 BRC   1,MOVETIME
                 MVI   0(R6),SEPARADOR
*SALTANDOSE EL ESPACIO DE LA COMA
                 AGHI  R6,1
*MOVIENDO EL PREFIJO DEL ODATE
                 LA    R2,PREFIJO_ANO
                 XGR   R7,R7
                 XGR   R3,R3
                 LGHI  R7,L'PREFIJO_ANO
                 LGHI  R3,L'PREFIJO_ANO
MOVEANOODATE     MVCLE R6,R2,0
                 BRC   1,MOVEANOODATE
*MOVIENDO EL ODATE AL BUFFER
                 LGR   R2,R8
                 AGHI  R2,DESP_ODATE
                 XGR   R7,R7
                 XGR   R3,R3
                 LGHI  R7,TAM_ODATE
                 LGHI  R3,TAM_ODATE
MOVEODATE        MVCLE R6,R2,0
                 BRC   1,MOVEODATE
                 MVI   0(R6),SEPARADOR
                 AGHI  R6,1
*MOVIENDO EL CÏDIGO DE EVENTO/ACCIÏN
*RESETEANDO EL APUNTADOR DEL ARCHIVO DE ENTRADA AL INICIO DEL REGIST
                 LGR   R2,R8
                 AGHI  R2,DESP_CODIGO
                 XGR   R7,R7
                 XGR   R3,R3
                 LGHI  R7,TAM_CODIGO
                 LGHI  R3,TAM_CODIGO
*SE RESPALDA EL APUNTADOR AL INICIO DEL CÏDIGO EN EL BUFFER PARA UTI
*ZARLO EN LA SUBRUTINA REG_SIN_JOB
                 LGR   R10,R6
MOVECODIGO       MVCLE R6,R2,0
                 BRC   1,MOVECODIGO
                 MVI   0(R6),FIN_CADENA
*PROBANDO SI EL CODIGO IMPLICA QUE NO HAY JOBNAME, Y ENTONCES, SE DE
*TOMAR EL MEMBER NAME
                 BAS   R9,REG_SIN_JOB
*POR DEFAULT, LA VARIABLE DE POSICIÏN DEL JOB NAME TIENE EL VALOR CO
                 LG   R3,WRKAREA
                 MVI  0(R3),DESP_JOB
*SI EL CÏDIGO IMPLICA QUE EL REGISTRO NO TIENE JOB NAME, LA POSICIÏN
*DEL JOB NAME ES ASIGNADA A LA POSICIÏN DEL MEMBER NAME
                 IF (CLFI,R15,EQ,VERDADERO) THEN
                     MVI  0(R3),DESP_MEMBER
                 ENDIF
                 AGHI  R6,1
*MOVIENDO EL GRUPO/MALLA
                 LGR   R2,R8
                 AGHI  R2,DESP_GRUPO
                 XGR   R7,R7
                 XGR   R3,R3
                 LGHI  R7,TAM_GRUPO
                 LGHI  R3,TAM_GRUPO
MOVEGRUPO        MVCLE R6,R2,0
                 BRC   1,MOVEGRUPO
                 MVI   0(R6),SEPARADOR
                 AGHI  R6,1
*MOVIENDO EL JOB
                 LGR   R2,R8
                 LG    R3,WRKAREA
                 XGR   R5,R5
                 LLGC  R5,0(R3)
                 AGR   R2,R5
*SI EL NOMBRE DEL JOB EMPIEZA CON X'00', SIGNIFICA QUE SU NOMBRE ES
*INVALIDO, POR LO QUE SE TOMA EL NOMBRE DEL MEMBER. SUCEDE CON EL
*CODIGO SEL219I.
                 IF (CLI,0(R2),EQ,FIN_CADENA)
                     LGR   R2,R8
                     AGHI  R2,DESP_MEMBER
                 ENDIF
                 XGR   R7,R7
                 XGR   R3,R3
                 LGHI  R7,TAM_JOB
                 LGHI  R3,TAM_JOB
MOVEJOB          MVCLE R6,R2,0
                 BRC   1,MOVEJOB
                 MVI   0(R6),SEPARADOR
                 AGHI  R6,1
*MOVIENDO EL ORDER ID
                 LGR   R2,R8
                 AGHI  R2,DESP_OID
                 XGR   R7,R7
                 XGR   R3,R3
                 LGHI  R7,TAM_OID
                 LGHI  R3,TAM_OID
MOVEOID          MVCLE R6,R2,0
                 BRC   1,MOVEOID
                 MVI   0(R6),SEPARADOR
                 AGHI  R6,1
*MOVIENDO EL JOB ID
                 LGR   R2,R8
                 AGHI  R2,DESP_JOBID
*SI EL JOB ID NO COMIENZA CON UN CARACTER NUM©RICO, SE ASUME QUE NO ES
*VALIDO Y SE ASIGNAN BLANCOS EN ESTE CAMPO
                 IF (CLI,0(R2),LT,C'0'),OR,                            X
               (CLI,0(R2),GT,C'9') THEN
                     LA    R2,CAMPO_VACIO
                 ENDIF
                 XGR   R7,R7
                 XGR   R3,R3
                 LGHI  R7,TAM_JOBID
                 LGHI  R3,TAM_JOBID
MOVEJOBID        MVCLE R6,R2,0
                 BRC   1,MOVEJOBID
                 MVI   0(R6),SEPARADOR
                 AGHI  R6,1
*SE CALCULAN LOS APUNTADORES DEL PASO Y ERROR DE CANCELACIÏN
*SE ASIGNA EL PARAMETRO DE APUNTADOR BASE DE LA LINEA DEL ARCHIVO
*DE ENTRADA
                 LGR   R1,R8
*SE ASIGNA EL PARAMETRO DE APUNTADOR A LA CADENA QUE REPRESENTA EL
*CÏDIGO YA ALMACENADO EN EL BUFFER
                 LG    R10,ORIGIN
                 AGHI  R10,DESP_CODIGO_BUF
                 BAS   R9,INFO_CANCELACION
*MOVIENDO EL PASO DE CANCELACIÏN
                 LGR   R2,R3
                 XGR   R3,R3
                 XGR   R7,R7
                 LGHI  R3,TAM_PASO
                 LGHI  R7,TAM_PASO
MOVEPASO         MVCLE R6,R2,0
                 BRC   1,MOVEPASO
                 MVI   0(R6),SEPARADOR
                 AGHI  R6,1
*MOVIENDO EL CODIGO DE ERROR
                 LGR   R2,R5
                 XGR   R3,R3
                 XGR   R7,R7
                 LGHI  R3,TAM_ERROR
                 LGHI  R7,TAM_ERROR
MOVEERROR        MVCLE R6,R2,0
                 BRC   1,MOVEERROR
                 MVI   0(R6),SEPARADOR
                 AGHI  R6,1
*SE CALCULA EL DESPLAZAMIENTO DE LA ACCIÏN Y EL USUARIO QUE LA
*EJECUTÏ.
*SE ASIGNA EL PARAMETRO DE APUNTADOR A LA CADENA QUE REPRESENTA EL
*CÏDIGO YA ALMACENADO EN EL BUFFER
                 LG    R10,ORIGIN
                 AGHI  R10,DESP_CODIGO_BUF
                 BAS   R9,INFO_ACCION
*MOVIENDO LA ACCIÏN
                 LGR   R2,R8
                 AGR   R2,R3
                 XGR   R3,R3
                 XGR   R7,R7
                 LGHI  R3,TAM_ACCION
                 LGHI  R7,TAM_ACCION
*SI INFO_ACCION REGRESÏ FALSO, EL APUNTADOR DE LA CADENA A COPIAR AL
*ARCHIVO DE SALIDA SE ASIGNA A UNA CADENA CON BLANCOS
                 IF (CLFI,R15,EQ,FALSO) THEN
                     LA R2,CAMPO_VACIO
                 ENDIF
MOVEACCION       MVCLE R6,R2,0
                 BRC   1,MOVEACCION
                 MVI   0(R6),SEPARADOR
                 AGHI  R6,1
*MOVIENDO EL USUARIO
                 LGR   R2,R8
                 AGR   R2,R5
                 XGR   R3,R3
                 XGR   R7,R7
                 LGHI  R3,TAM_USUARIO
                 LGHI  R7,TAM_USUARIO
*SI INFO_ACCION REGRESÏ FALSO, EL APUNTADOR DE LA CADENA A COPIAR AL
*ARCHIVO DE SALIDA SE ASIGNA A UNA CADENA CON BLANCOS
                 IF (CLFI,R15,EQ,FALSO) THEN
                     LA R2,CAMPO_VACIO
                 ENDIF
MOVEUSUARIO      MVCLE R6,R2,0
                 BRC   1,MOVEUSUARIO
                 LG    R10,ORIGIN
                 MVI   TAM_CODIGO+DESP_CODIGO_BUF(R10),SEPARADOR
*DESPUES DE HACER MVCLE LOS REGISTROS QUEDAN
*MODIFICADOS EN FUNCIÏN DEL N£MERO DE BYTES COPIADOS,CON LO QUE
*ES NECESARIO REGREAR EL APUNTADOR DE LA MEMORIA VIRTUAL AL PUNTO
*DE INICIO
                 LG    R6,ORIGIN
                 XGR   R7,R7
                 XGR   R5,R5
                 LGHI  R7,TAM_REGISTRO-1
                 LGHI  R5,TAM_REGISTRO-1
MOVEOUT          MVCLE R4,R6,0
*SI SE MOVIERON MENOS BYTES DE LOS ESPECIFICADOS
*EN LOS REGISTROS IMPARES, SE REPITE LA OPERACION
                 BRC   1,MOVEOUT
             ENDIF
*SE PROCEDE A COPIAR EL SIGUIENTE REGISTRO
         ENDDO
EOF      SAM31
         CLOSE (LOGOUT),MODE=31
         CLOSE (LOGIN),MODE=31
         DS    0H
*REGRESA AL DIRECCOINAMIENTO DE 64 BITS
         SAM64
*SE PONE EL RETURN CODE A 0
         LGHI  R15,0
*SE RESTAURA EL R13 DEL QUE LLAMA
         LG    R13,128(,R13)
*SE RESTAURA EL R14 DEL QUE LLAMA
         LG    R14,8(,R13)
*SE RESTAURAN R0-12 DEL QUE LLAMA
         LMG   R0,R12,24(R13)
*SE REGRESA EL CONTROL AL QUE LLAMA
         BR    R14
***********************************************************************
*DETERMINA SI EL CÏDIGO DE LA ACCIÏN/EVENTO ESTA ASOCIADO A UN REGISTRO
*QUE NO TIENE JOBNAME. SI ES ASI, REGRESA VERDADERO, DE LO CONTRARIO,
*FALSO. EL CÏDIGO DE LA ACCIÏN ESTA EN R10.
*MODIFICA R5,R11
***********************************************************************
REG_SIN_JOB LGR   R9,R9
         LA    R11,CNJ_CTM65AI
         BAS   R5,CADENA_EN_ARREGLO
         BR    R9
***********************************************************************
*DETERMINA SI EL CÏDIGO DE LA ACCIÏN/EVENTO ESTA ASOCIADO A UN REGISTRO
*VALIDO. SI ES ASI, REGRESA VERDADERO, DE LO CONTRARIO,
*FALSO. EL CÏDIGO LLEGA COMO PARAMETRO EN R10.
*MODIFICA R5,R11
***********************************************************************
REG_NO_VALIDO LGR R9,R9
         LA    R11,CRI_IOAJ5GE
         BAS   R5,CADENA_EN_ARREGLO
         BR    R9
***********************************************************************
*BUSCA LA CADENA CUYO APUNTADOR ESTA EN R10 DENTRO DEL ARREGLO
*CUYO INICIO ESTA EN R11.
*SI LA CADENA A LA QUE APUNTA EL REGISTRO ES UNA DE LAS DEL ARREGLO
*REGRESA VERDADERO,SI NO, FALSO.
*MODIFICA R3, R10 Y R11
***********************************************************************
CADENA_EN_ARREGLO LGR R5,R5
         LGFI R15,FALSO
         LGFI  R0,FIN_CADENA
*SE RESPALDA EL APUNTADOR A LA CADENA QUE SE PASA COMO PARAMETRO
         LGR   R3,R10
         DO WHILE=(CLI,0(R11),NE,FIN_ARRAY)
*SE RESTAURA EL APUNTADOR DE LA CADENA QUE SE PASO COMO PARAMTRO
*PARA PODER COMPARARLO CON LA CADENA ACTUAL DEL ARREGLO
             LGR   R10,R3
             IF (CLST,R10,8,R11) THEN
                 LGFI R15,VERDADERO
                 BR    R5
             ENDIF
*SI NO COINCIDIO EL CODIGO QUE SE PASO COMO PARAMETRO CON LA CONSTANTE
*DEL ARREGLO, SE PASA EL APUNTADOR DEL ARREGLO A LA SIGUIENTE CADENA
*PARA ESTO, SE AUMENTA EL APUNTADOR HASTA LA SIGUIENTE CADENA.
             DO WHILE=(CLI,0(R11),NE,FIN_CADENA)
                 AGHI R11,1
             ENDDO
             AGHI R11,1
         ENDDO
         BR R5
***********************************************************************
*HACE LO MISMO QUE CADENA_EN_ARREGLO, PERO REGRESA UN APUNTADOR
*AL PASO (R3) Y AL CÏDIGO DE ERROR (R5)Q SE DEBE ESCRIBIR EN EL ARCHIVO
*DE SALIDA, BASADO EN EL APUNTADOR DEL INICIO DEL REGISTRO DEL ARCHIVO
*DE ENTRADA R1. ADEMAS EL APUNTADOR AL ARREGLO DE CADENAS ES FIJO.
*SI NO SE ENCUENTRA EL CÏDIGO, REGRESA APUNTADORES A CADENAS EN BLANCO
*MODIFICA R7
***********************************************************************
INFO_CANCELACION LGR R9,R9
         LGFI R15,FALSO
         LGFI  R0,FIN_CADENA
*SE INICIALIZA EL CONTADOR (R7)
         XGR   R7,R7
*SE RESPALDA EL APUNTADOR A LA CADENA QUE SE PASA COMO PARAMETRO
         LGR   R3,R10
         LA    R11,CCA_SEL207E
         DO WHILE=(CLI,0(R11),NE,FIN_ARRAY)
*SE RESTAURA EL APUNTADOR DE LA CADENA QUE SE PASO COMO PARAMTRO
             LGR   R10,R3
*SI COINCIDIO LA CADENA CON ALGUN ELEMENTO DEL ARREGLO, SE PREPARAN
*LOS DATOS DE SALIDA.
             IF (CLST,R10,8,R11) THEN
                 LGFI R15,VERDADERO
*SE PREPARAN LOS APUNTADORES DE ACUERDO AL INDICE DEL CÏDIGO ENCONTRADO
*SI EL INDICE NO ES UN CASO ESPECIAL, SE ASIGNAN LOS VALORES
*COMUNES/DEFAULT.
                 SELECT CLFI,R7,EQ
                     WHEN (POS_CCA_SEL207E)
                         LA R3,CAMPO_VACIO
                         LGR  R5,R1
                         AGHI R5,DESP_ERROR_207
                     WHEN (POS_CCA_SEL211W)
                         LGR  R3,R1
                         AGHI R3,DESP_PASO_211
                         LA R5,ERROR_JCLE
                     WHEN (POS_CCA_SEL206W)
                         LGR  R3,R1
                         AGHI R3,DESP_PASO_206
                         LGR  R5,R1
                         AGHI R5,DESP_ERROR_206
                     OTHRWISE
                         LGR  R3,R1
                         AGHI R3,DESP_PASO
                         LGR  R5,R1
                         AGHI R5,DESP_ERROR
                 ENDSEL
                 BR    R9
             ENDIF
*SI NO COINCIDIO EL CODIGO QUE SE PASO COMO PARAMETRO CON LA CONSTANTE
*DEL ARREGLO, SE PASA EL APUNTADOR DEL ARREGLO A LA SIGUIENTE CADENA
*PARA ESTO, SE AUMENTA EL APUNTADOR HASTA LA SIGUIENTE CADENA.
             DO WHILE=(CLI,0(R11),NE,FIN_CADENA)
                 AGHI R11,1
             ENDDO
             AGHI R11,1
             AGHI R7,1
         ENDDO
         LA R3,CAMPO_VACIO
         LA R5,CAMPO_VACIO
         BR R9
***********************************************************************
*HACE LO MISMO QUE CADENA_EN_ARREGLO, PERO REGRESA EL DESPLAZAMIENTO
*DE LA ACCIÏN (R3) Y EL DEL USUARIO (R5). NO RECIBE COMO PARAMETRO
*EL ARREGLO DE CONSTANTES, ES FIJO.
*MODIFICA R7
***********************************************************************
INFO_ACCION      LGR R9,R9
         LGFI R15,FALSO
         LGFI  R0,FIN_CADENA
*SE INICIALIZA EL CONTADOR (R7)
         XGR   R7,R7
*SE RESPALDA EL APUNTADOR A LA CADENA QUE SE PASA COMO PARAMETRO
         LGR   R3,R10
         LA    R11,CAH_CTM65AI
         DO WHILE=(CLI,0(R11),NE,FIN_ARRAY)
*SE RESTAURA EL APUNTADOR DE LA CADENA QUE SE PASO COMO PARAMTRO
             LGR   R10,R3
*SI COINCIDIO LA CADENA CON ALGUN ELEMENTO DEL ARREGLO, SE PREPARAN
*LOS DATOS DE SALIDA.
             IF (CLST,R10,8,R11) THEN
                 LGFI R15,VERDADERO
*SE PREPARAN LOS DESPLAZAMIENTOS DE ACUERDO AL INDICE DEL CÏDIGO.
*SI EL INDICE NO ES UN CASO ESPECIAL, SE ASIGNAN LOS VALORES
*COMUNES/DEFAULT.
                 SELECT CLFI,R7,EQ
                     WHEN (POS_CAH_CTM678I)
                         LGFI R3,DESP_ACCION
                         LGFI R5,DESP_USUARIO_678
                     OTHRWISE
                         LGFI R3,DESP_ACCION
                         LGFI R5,DESP_USUARIO
                 ENDSEL
                 BR    R9
             ENDIF
*SI NO COINCIDIO EL CODIGO QUE SE PASO COMO PARAMETRO CON LA CONSTANTE
*DEL ARREGLO, SE PASA EL APUNTADOR DEL ARREGLO A LA SIGUIENTE CADENA
*PARA ESTO, SE AUMENTA EL APUNTADOR HASTA LA SIGUIENTE CADENA.
             DO WHILE=(CLI,0(R11),NE,FIN_CADENA)
                 AGHI R11,1
             ENDDO
             AGHI R11,1
             AGHI R7,1
         ENDDO
         BR R9
STATIC   LTORG
*ARREGLO DE CADENAS QUE INDICAN QUE EL REGISTRO ES INVALIDO, ES DECIR
*DEBE IGNORARSE
CRI_IOAJ5GE DC C'IOAJ5GE'
DRI_0       DC X'00'
CRI_IOAJ01I DC C'IOAJ01I'
DRI_1       DC X'00'
CRI_IOAJ02I DC C'IOAJ02I'
DRI_2       DC X'00'
CRI_CTM567I DC C'CTM567I'
DRI_3       DC X'00'
CRI_JOB501I DC C'JOB501I'
DRI_4       DC X'00'
CRI_JOB525I DC C'JOB525I'
DRI_5       DC X'00'
CRI_CHK431I DC C'CHK431I'
DRI_6       DC X'00'
CRI_CHK432I DC C'CHK432I'
DRI_7       DC X'00'
CRI_FRM452I DC C'FRM452I'
DRI_8       DC X'00'
CRI_IOAJ52W DC C'IOAJ52W'
DRI_9       DC X'00'
CRI_CTD049I DC C'CTD049I'
DRI_A       DC X'00'
CRI_CTD511I DC C'CTD511I'
DRI_B       DC X'00'
CRI_CTD696I DC C'CTD696I'
DRI_C       DC X'00'
CRI_CTD051S DC C'CTD051S'
DRI_D       DC X'00'
CRI_IOAJ51W DC C'IOAJ51W'
DRI_E       DC X'00'
CRI_JOB513I DC C'JOB513I'
DRI_F       DC X'00'
CRI_CTDA12I DC C'CTDA12I'
DRI_G       DC X'00'
CRI_CTDA14I DC C'CTDA14I'
DRI_H       DC X'00'
CRI_XMM777I DC C'XMM777I'
DRI_I       DC X'00'
CRI_XMM778I DC C'XMM778I'
DRI_J       DC X'00'
CRI_CTM7A0I DC C'CTM7A0I'
DRI_K       DC X'00'
CRI_CTM7A1I DC C'CTM7A1I'
DRI_L       DC X'00'
CRI_CTM7ACI DC C'CTM7ACI'
DRI_M       DC X'00'
CRI_CTDG18I DC C'CTDG18I'
DRI_N       DC X'00'
CRI_CTD947I DC C'CTD947I'
DRI_O       DC X'00'
CRI_F34493I DC C'F34493I'
DRI_P       DC X'00'
CRI_F34494W DC C'F34494W'
DRI_Q       DC X'00'
CRI_F34495I DC C'F34495I'
DRI_R       DC X'00'
CRI_SCD203I DC C'SCD203I'
DRI_S       DC X'00'
CRI_REP268I DC C'REP268I'
DRI_T       DC X'00'
CRI_REP251I DC C'REP251I'
DRI_U       DC X'00'
CRI_SCD208I DC C'SCD208I'
DRI_V       DC X'00'
DRI_FF    DC X'FF'
*ARREGLO DE CONSTANTES QUE INDICAN LOS CODIGOS QUE IMPLICAN QUE UN
*REGISTRO NO TIENE JOB NAME, SOLO MEMBER NAME
CNJ_CTM65AI DC C'CTM65AI'
DNJ_0       DC X'00'
CNJ_CTM678I DC C'CTM678I'
DNJ_1       DC X'00'
CNJ_FRM467I DC C'FRM467I'
DNJ_2       DC X'00'
CNJ_JOB511I DC C'JOB511I'
DNJ_3       DC X'00'
CNJ_SEL203I DC C'SEL203I'
DNJ_5       DC X'00'
CNJ_SEL207E DC C'SEL207E'
DNJ_6       DC X'00'
CNJ_SEL218I DC C'SEL218I'
DNJ_7       DC X'00'
CNJ_SEL220I DC C'SEL220I'
DNJ_8       DC X'00'
CNJ_SEL253I DC C'SEL253I'
DNJ_9       DC X'00'
CNJ_SEL254I DC C'SEL254I'
DNJ_A       DC X'00'
CNJ_SEL255I DC C'SEL255I'
DNJ_B       DC X'00'
CNJ_SUB13AI DC C'SUB13AI'
DNJ_C       DC X'00'
CNJ_SUB134E DC C'SUB134E'
DNJ_D       DC X'00'
DELIM_FF    DC X'FF'
*ARREGLO DE CONSTANTES QUE INDICAN LOS CÏDIGOS QUE IMPLICAN CANCELACIÏN
CCA_SEL207E DC C'SEL207E'
DCA_0       DC X'00'
CCA_SEL211W DC C'SEL211W'
DCA_1       DC X'00'
CCA_SEL206W DC C'SEL206W'
DCA_2       DC X'00'
CCA_SEL210E DC C'SEL210E'
DCA_3       DC X'00'
CCA_SEL212W DC C'SEL212W'
DCA_4       DC X'00'
CCA_SEL213W DC C'SEL213W'
DCA_5       DC X'00'
CCA_SEL216W DC C'SEL216W'
DCA_6       DC X'00'
DCA_FF      DC X'FF'
*ARREGLO DE CONSTANTES QUE INDICAN ACCIONES HUMANAS
CAH_CTM65AI DC C'CTM65AI'
DAH_0       DC X'00'
CAH_CTM678I DC C'CTM678I'
DAH_1       DC X'00'
DAH_FF      DC X'FF'
CAMPO_VACIO DC C'                    '
ERROR_JCLE  DC C'JCLE'
COD_EMPRESA DC C'M'
PREFIJO_ANO DC C'20'
MAINEND     DS 0D
MAXSIZE     EQU   1
SEPARADOR   EQU C','
*CONSTANTES DEL FORMATO DEL LOG IOA
DESP_TIME   EQU 7
TAM_TIME    EQU 12
DESP_ODATE  EQU 19
TAM_ODATE   EQU 6
DESP_CODIGO EQU 35
TAM_CODIGO  EQU 7
DESP_GRUPO  EQU 42
TAM_GRUPO   EQU 20
DESP_MEMBER EQU 63
TAM_MEMBER  EQU 8
DESP_OID    EQU 71
TAM_OID     EQU 5
DESP_JOB    EQU 76
TAM_JOB     EQU 8
DESP_JOBID  EQU 84
TAM_JOBID   EQU 5
DESP_PASO   EQU 121
DESP_PASO_206 EQU 111
DESP_PASO_211 EQU 115
TAM_PASO    EQU 8
DESP_ERROR  EQU 111
DESP_ERROR_206 EQU 100
DESP_ERROR_207 EQU 111
TAM_ERROR   EQU 4
DESP_ACCION EQU 82
TAM_ACCION  EQU 7
DESP_USUARIO EQU 104
DESP_USUARIO_678 EQU 102
TAM_USUARIO EQU 8
TAM_REGISTRO0 EQU L'COD_EMPRESA+1+L'PREFIJO_ANO+TAM_TIME+1
TAM_REGISTRO1 EQU TAM_REGISTRO0+L'PREFIJO_ANO+TAM_ODATE+1
TAM_REGISTRO2 EQU TAM_REGISTRO1+TAM_CODIGO+1+TAM_GRUPO+1
TAM_REGISTRO3 EQU TAM_REGISTRO2+TAM_OID+1+TAM_JOB+1+TAM_JOBID+1
TAM_REGISTRO4 EQU TAM_REGISTRO3+TAM_PASO+1+TAM_ERROR+1
TAM_REGISTRO  EQU TAM_REGISTRO4+TAM_ACCION+1+TAM_USUARIO+1
VERDADERO   EQU 1
FALSO       EQU 0
FIN_CADENA  EQU X'00'
FIN_ARRAY   EQU X'FF'
POS_CCA_SEL207E EQU 0
POS_CCA_SEL211W EQU 1
POS_CCA_SEL206W EQU 2
POS_CAH_CTM678I EQU 1
DESP_CODIGO_BUF EQU TAM_REGISTRO1
         END ENTRY
